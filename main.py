import os
import json
import requests
import re
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont
from dotenv import load_dotenv
from requests_html import HTMLSession

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def get_chao_phraya_dam_data():
    url = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
    try:
        res = requests.get(url, timeout=30)
        res.raise_for_status()
        match = re.search(r'var json_data = (\[.*\]);', res.text)
        if not match: return "-"
        json_string = match.group(1)
        data = json.loads(json_string)
        dam_discharge = data[0]['itc_water']['C13']['storage']
        return str(int(float(dam_discharge.replace(",", "")))) if dam_discharge else "-"
    except Exception:
        return "-"

def get_inburi_bridge_data() -> float | str:
    """
    Retrieve the latest water level for the In Buri gauge from ThaiWater.

    The ThaiWater provincial dashboard is rendered client-side and its markup may
    change over time.  The previous implementation looked up a <th
    scope="row"> element containing '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' and assumed the second <td>
    contained the numeric water level.  That approach incorrectly matched other
    stations whose location included the word ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ and broke when the
    column order changed.

    This version renders the page using requests_html, then iterates over each
    row and examines the station name in the first <th>.  Only rows where the
    station name contains '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' are considered.  The water level is then
    extracted from the third <td> (index 2), which currently holds the water
    level value.  A simple numeric pattern match is used to validate the value.

    Returns:
        float | str: The water level in metres if found, otherwise "-".
    """
    url = "https://singburi.thaiwater.net/wl"
    try:
        session = HTMLSession()
        headers = {
            "User-Agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/122.0.0.0 Safari/537.36"
            )
        }
        r = session.get(url, headers=headers, timeout=30)
        # Render the page to execute JavaScript and load dynamic content
        r.html.render(sleep=5, timeout=90, scrolldown=3)
        soup = BeautifulSoup(r.html.html, "html.parser")
        for row in soup.find_all("tr"):
            station_th = row.find("th")
            if not station_th:
                continue
            station_name = station_th.get_text(strip=True)
            if "‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ" not in station_name:
                continue
            tds = row.find_all("td")
            if len(tds) >= 3:
                water_text = tds[2].get_text(strip=True)
                match = re.search(r"[0-9]+[\.,][0-9]+", water_text)
                if match:
                    try:
                        return float(water_text.replace(",", ""))
                    except ValueError:
                        pass
            # If unable to parse, return "-" to indicate missing data
            return "-"
        return "-"
    except Exception:
        return "-"

def get_weather_status():
    import os
    import requests

    api_key = os.getenv("OPENWEATHER_API_KEY")
    if not api_key:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"

    # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡∏ö‡∏•‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ
    lat, lon = "14.9308", "100.3725"
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&lang=th&units=metric"

    try:
        res = requests.get(url, timeout=30)
        data = res.json()
        if "weather" not in data or len(data["weather"]) == 0:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"

        desc_en = data["weather"][0]["main"].lower()
        desc_detail = data["weather"][0]["description"].lower()

        # Mapping ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        if "rain" in desc_en:
            return "‡∏ù‡∏ô‡∏ï‡∏Å"
        elif "cloud" in desc_en:
            if "overcast" in desc_detail:
                return "‡πÄ‡∏°‡∏Ü‡∏Ñ‡∏£‡∏∂‡πâ‡∏°‡∏°‡∏≤‡∏Å"
            elif "scattered" in desc_detail:
                return "‡πÄ‡∏°‡∏Ü‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢"
            else:
                return "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"
        elif "clear" in desc_en:
            return "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™"
        elif "storm" in desc_en or "thunderstorm" in desc_en:
            return "‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á"
        elif "mist" in desc_en or "fog" in desc_en:
            return "‡∏´‡∏°‡∏≠‡∏Å‡∏•‡∏á"
        else:
            return desc_detail.capitalize()

    except Exception as e:
        return "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"


# --- ‚ú® [‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Caption ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÑ‡∏õ ---
def generate_facebook_caption(water_level, discharge, weather) -> str:
    caption_lines = []
    hashtags = []
    
    try:
        level = float(water_level)
    except (ValueError, TypeError):
        level = 0.0

    try:
        dis_val = int(discharge)
    except (ValueError, TypeError):
        dis_val = 0

    if level == 0.0:
         caption_lines.append("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    elif level >= 12.0:
        caption_lines.append(f"‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà {level:.2f} ‡∏°. ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
        hashtags.append("#‡∏ô‡πâ‡∏≥‡∏ß‡∏¥‡∏Å‡∏§‡∏ï")
    elif level >= 11.5:
        caption_lines.append(f"üî∂ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ {level:.2f} ‡∏°. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î")
        hashtags.append("#‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á")
    else:
        caption_lines.append(f"‚úÖ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {level:.2f} ‡∏°. ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡∏µ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
        hashtags.append("#‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡∏µ")

    if dis_val >= 2000:
        caption_lines.append(f"‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡∏á {dis_val} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥")
        hashtags.append("#‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡πÅ‡∏£‡∏á")
    elif dis_val >= 1000:
        caption_lines.append(f"‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥ {dis_val} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥")
        hashtags.append("#‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏°‡∏≤‡∏Å")

    if "‡∏ù‡∏ô" in weather:
        hashtags.append("#‡∏ù‡∏ô‡∏ï‡∏Å")
    elif "‡πÄ‡∏°‡∏Ü" in weather:
        hashtags.append("#‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°")

    hashtags.append("#‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏≠‡∏î‡∏°‡∏±‡πâ‡∏¢")

    return "\n".join(caption_lines) + "\n\n" + " ".join(hashtags)

# --- ‚ú® [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ---
def create_report_image(dam_discharge, water_level, weather_status):
    from PIL import Image, ImageDraw, ImageFont

    IMAGE_WIDTH = 788
    IMAGE_HEIGHT = 763
    TEXT_COLOR = "#000000"

    # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å background.png ‡∏à‡∏£‡∏¥‡∏á)
    box_left = 60
    box_right = IMAGE_WIDTH - 60
    box_top = 170
    box_bottom = 610
    center_x = (box_left + box_right) // 2
    Y_START = box_top + 20
    line_spacing = 60

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    try:
        image = Image.open("background.png").convert("RGB")
    except FileNotFoundError:
        image = Image.new("RGB", (IMAGE_WIDTH, IMAGE_HEIGHT), "#fff6db")

    draw = ImageDraw.Draw(image)

    # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
    try:
        font_main = ImageFont.truetype("Sarabun-Bold.ttf", 40)
        font_sub = ImageFont.truetype("Sarabun-Regular.ttf", 36)
    except:
        font_main = font_sub = ImageFont.load_default()

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    level_text = f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‡∏ì ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: {water_level:.2f} ‡∏°." if isinstance(water_level, float) else "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ ‡∏ì ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: N/A"
    discharge_text = f"‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏Ø: {dam_discharge} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
    weather_text = f"‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {weather_status}"

    # <<<<<<<<<<<<<<<<<<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ >>>>>>>>>>>>>>>>>>>>
    TALING_LEVEL = 13.0
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>

    diff = TALING_LEVEL - water_level if isinstance(water_level, float) else 99
    if diff <= 1.5:
        sit_text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"
        sit_detail = "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≥‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á"
    elif diff <= 2.5:
        sit_text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"
        sit_detail = "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏¥‡πà‡∏á"
    else:
        sit_text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡∏õ‡∏Å‡∏ï‡∏¥"
        sit_detail = "‡∏ô‡πâ‡∏≥‡∏¢‡∏±‡∏á‡∏´‡πà‡∏≤‡∏á‡∏ï‡∏•‡∏¥‡πà‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡πâ‡∏≤"

    # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏†‡∏≤‡∏û
    y = Y_START
    draw.text((center_x, y), level_text, font=font_main, fill=TEXT_COLOR, anchor="mm")
    y += line_spacing
    draw.text((center_x, y), discharge_text, font=font_sub, fill=TEXT_COLOR, anchor="mm")
    y += line_spacing
    draw.text((center_x, y), weather_text, font=font_sub, fill=TEXT_COLOR, anchor="mm")
    y += line_spacing
    draw.text((center_x, y), sit_text, font=font_main, fill=TEXT_COLOR, anchor="mm")
    y += line_spacing
    draw.text((center_x, y), sit_detail, font=font_sub, fill=TEXT_COLOR, anchor="mm")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    image.save("final_report.jpg", quality=95)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á caption ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook
    dynamic_caption = generate_facebook_caption(water_level, dam_discharge, weather_status)
    with open("status.txt", "w", encoding="utf-8") as f:
        f.write(dynamic_caption)

if __name__ == "__main__":
    load_dotenv()
    dam = get_chao_phraya_dam_data()
    level = get_inburi_bridge_data()
    weather = get_weather_status()
    create_report_image(dam, level, weather)
